<main>
    <h1 class="p-2 text-center w-100" id="title">
        Carrito de compras
    </h1>
    <section class="d-flex flex-wrap justify-content-center align-items-center m-3">
        {{#each carts}}
            <div class="card col-lg-2 col-md-3 col-sm-4 mb-3 mx-2 rem-8" id="card{{this._id}}">
                <img src={{this.product_id.photo}} class="card-img-top" alt="">
                <div class="card-body d-flex flex-column align-items-stretch" id="card-body">
                    <h5 class="card-title pt-2 text-center">{{this.product_id.title}}</h5>
                    <p class="card-text p-2 text-end">${{this.product_id.price}}</p>
                </div>
                <div class="d-flex align-items-center mt-3 contenedor-botones-carrito">
                    <div class="boton-eliminar">
                        <button type="button" class="btn btn-secondary" onclick="destroyCart('{{this._id}}')">
                            <span class="material-symbols-outlined">
                            delete
                            </span>
                        </button>
                    </div>
                    <div class="botones-body">
                        <button type="button" class="btn btn-secondary boton" onclick="updateQuantity(-1 , '{{this._id}}')"> - </button>
                        <span id="cantidad{{this._id}}" value="{{this.quantity}}">{{this.quantity}}</span>
                        <button class="btn btn-sm btn-secondary boton" onclick="updateQuantity(1 , '{{this._id}}')">+</button>
                    </div>
                </div>
            </div>
        {{/each}}
    </section>
    <div class="text-center">
        <button type="button" class="btn btn-primary m-2">Finalizar compra</button>
        <button type="button" class="btn btn-danger m-2">Cancelar compra</button>
    </div>
</main>

<style>
    #title  {
        background-color:#FEB272; 
        color: #fff; 
        font-weight: 600;
        text-shadow: 1px 1px 1px #000;
    }
    .card-title {
        height: 2rem; /* Asegura que todas las tarjetas tengan al menos la misma altura */
    }
    #card img {
        background-color: #FEB272;
    }
    #card {
        width: 100%;
        max-width: 200px;
    }
    .boton{
      background-color:#fff; 
      border: none;
      width: 1.5rem;
      color: #000;
      font-weight: 700;
      border-radius: 100%;
      aspect-ratio: 1 / 1;
    }
    .botones-body span{
      font-size: 1.5rem;
      font-weight: 700;
      margin: 0 0.5rem !important;
      color: #fff;
      aspect-ratio: 1 / 1;
      width: 2rem;
      text-align: center;
    }
    .botones-body{
      background-color: #FEB272;
      padding: 5px !important;
      border-radius: 0.5rem;
      display: flex;
      height: 2rem;
      align-items: center;
    }
    .boton-eliminar{
        padding: 10px !important;
        border-radius: 0.5rem;
        display: flex;
        height: 2.5rem;
        align-items: center;
        background: #FEB272;
        position: absolute;
        left: 5px;
    }
    .boton-eliminar button{
        border: none;
        background: none;
    }
    .boton-eliminar button:hover{
        background: none
    }

    .contenedor-botones-carrito {
      justify-content: end;
      margin-right: 0.5rem !important;
      margin-bottom: 0.5rem !important;  
    }
</style>

<script>
function updateQuantity(amount, cartId) {
  // Obtener el elemento del span que muestra la cantidad
  const cantidadElement = document.getElementById(`cantidad${cartId}`);
  // Obtener la cantidad actual del producto del atributo "value" del span
  let currentQuantity = parseInt(cantidadElement.getAttribute('value'));
  console.log("current: ", currentQuantity)

  if (currentQuantity === 0 && amount === -1) {
    return;
  }

  // Lógica para llamar a los métodos create, update o destroy según corresponda
  if (currentQuantity === 1 && amount === -1) {
    console.log("logica de eliminacion de carrito")
    destroyCart(cartId);

  } else {
    // Llamar al método update si la cantidad cambia de cualquier otro valor
    console.log("logica de actualizacion de carrito")
    updateCart(cartId, currentQuantity + amount);
  }

  // Incrementar o decrementar la cantidad según el botón clickeado
  currentQuantity += amount;

  // Actualizar el atributo "value" del span con la nueva cantidad
  cantidadElement.setAttribute('value', currentQuantity);

  // Actualizar el texto del span para mostrar la nueva cantidad
  cantidadElement.textContent = currentQuantity;

}
// Función para eliminar el carrito
const destroyCart = async (cartId) => {
  try {
    console.log('Eliminando el carrito...');
    const response = await fetch(`/api/carts/${cartId}`, {
      method: 'DELETE',
    });
    const data = await response.json();
    console.log('Carrito eliminado:', data);
    const cardElement = document.getElementById(`card${cartId}`);
    cardElement.remove();
  } catch (error) {
    console.error('Error al eliminar el carrito:', error);
  }
};

// Función para actualizar el carrito
const updateCart = async (cartId, newQuantity) => {
  try {
    console.log('Actualizando el carrito...');
    const response = await fetch(`/api/carts/${cartId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        quantity: newQuantity,
      }),
    });
    const data = await response.json();
    console.log('Carrito actualizado:', data);
  } catch (error) {
    console.error('Error al actualizar el carrito:', error);
  }
};

</script>